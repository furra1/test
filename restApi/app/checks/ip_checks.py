import dns.resolver
import requests
import socket
import subprocess
import platform
import time
import statistics
import sys
from urllib.parse import urlparse
from typing import List, Dict, Optional

def normalize_domain(domain):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    if domain.startswith(('http://', 'https://')):
        parsed = urlparse(domain)
        return parsed.hostname or domain
    return domain



def get_dns_servers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return [
        '8.8.8.8', 
        '1.1.1.1', 
        '208.67.222.222',  
    ]

def dns_lookup(domain, record_type='A', dns_server=None):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç DNS –∑–∞–ø—Ä–æ—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    """
    domain = normalize_domain(domain)
    
    try:
        resolver = dns.resolver.Resolver()
        
        if dns_server:
            resolver.nameservers = [dns_server]
        
        answers = resolver.resolve(domain, record_type)
        
        results = []
        for rdata in answers:
            results.append(str(rdata))
        
        return {
            'success': True,
            'domain': domain,
            'type': record_type,
            'results': results,
            'dns_server': dns_server or 'system'
        }
        
    except dns.resolver.NoAnswer:
        return {
            'success': False,
            'domain': domain,
            'type': record_type,
            'error': f'No {record_type} record found',
            'dns_server': dns_server or 'system'
        }
    except dns.resolver.NXDOMAIN:
        return {
            'success': False,
            'domain': domain,
            'type': record_type,
            'error': 'Domain does not exist',
            'dns_server': dns_server or 'system'
        }
    except dns.resolver.Timeout:
        return {
            'success': False,
            'domain': domain,
            'type': record_type,
            'error': 'DNS query timed out',
            'dns_server': dns_server or 'system'
        }
    except Exception as e:
        return {
            'success': False,
            'domain': domain,
            'type': record_type,
            'error': f'Error: {str(e)}',
            'dns_server': dns_server or 'system'
        }

def check_all_records(domain, dns_server=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã DNS –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞
    """
    domain = normalize_domain(domain)
    
    print(f"\nDNS LOOKUP {domain}")
    if dns_server:
        print(f"DNS Server: {dns_server}")
    print("‚îÄ" * 60)
    
    record_types = [
        ('A', 'IPv4 addresses'),
        ('AAAA', 'IPv6 addresses'),
        ('MX', 'Mail servers'),
        ('NS', 'Name servers'),
        ('TXT', 'Text records'),
        ('CNAME', 'Canonical name'),
        ('SOA', 'Start of authority')
    ]
    
    all_results = {}
    
    for record_type, description in record_types:
        print(f"\n{record_type:6} ({description}):")
        print("  " + "‚îÄ" * 50)
        
        result = dns_lookup(domain, record_type, dns_server)
        all_results[record_type] = result
        
        if result['success']:
            for i, record in enumerate(result['results'], 1):
                if record_type == 'MX':
                    parts = record.split()
                    if len(parts) >= 2:
                        priority = parts[0]
                        server = ' '.join(parts[1:])
                        print(f"  {i:2d}. Priority: {priority}, Server: {server}")
                    else:
                        print(f"  {i:2d}. {record}")
                else:
                    print(f"{i:2d}. {record}")
        else:
            print(f"{result['error']}")
    
    return all_results

def check_with_multiple_dns(domain):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    domain = normalize_domain(domain)
    dns_servers = get_dns_servers()
    
    print(f"\nDNS LOOKUP {domain} - Multiple DNS Servers")
    print("‚îÄ" * 60)
    
    for dns_server in dns_servers:
        print(f"\nüì° Using DNS: {dns_server}")
        result = dns_lookup(domain, 'A', dns_server)
        
        if result['success']:
            print(f" A records: {', '.join(result['results'])}")
        else:
            print(f"{result['error']}")

def detailed_mx_check(domain):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MX –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π A –∑–∞–ø–∏—Å–µ–π –¥–ª—è mail —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    domain = normalize_domain(domain)
    
    print(f"\nDETAILED MX CHECK {domain}")
    print("‚îÄ" * 60)
    
    mx_result = dns_lookup(domain, 'MX')
    
    if not mx_result['success']:
        print(f"{mx_result['error']}")
        return
    
    print("MX Records found:")
    for i, mx_record in enumerate(mx_result['results'], 1):
        parts = mx_record.split()
        if len(parts) >= 2:
            priority = parts[0]
            mail_server = ' '.join(parts[1:])
            
            print(f"\n{i}. Mail Server: {mail_server}")
            print(f"   Priority: {priority}")
            
            a_result = dns_lookup(mail_server, 'A')
            if a_result['success']:
                print(f"   IPv4: {', '.join(a_result['results'])}")
            else:
                print(f"   IPv4: Not found")
            
            aaaa_result = dns_lookup(mail_server, 'AAAA')
            if aaaa_result['success']:
                print(f"   IPv6: {', '.join(aaaa_result['results'])}")

def dns_benchmark(domain):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑–Ω—ã—Ö DNS —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    domain = normalize_domain(domain)
    dns_servers = get_dns_servers()
    
    print(f"\nDNS BENCHMARK {domain}")
    print("‚îÄ" * 60)
    
    results = []
    
    for dns_server in dns_servers:
        start_time = time.time()
        result = dns_lookup(domain, 'A', dns_server)
        response_time = (time.time() - start_time) * 1000  
        
        status = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if result['success'] else '–û—Ç–∫–∞–∑'
        results.append({
            'server': dns_server,
            'time': response_time,
            'success': result['success'],
            'records': result['results'] if result['success'] else []
        })
        
        if result['success']:
            print(f"{status} {dns_server:15} - {response_time:6.1f} ms - {', '.join(result['results'])}")
        else:
            print(f"{status} {dns_server:15} - {response_time:6.1f} ms - {result['error']}")
    
    successful_results = [r for r in results if r['success']]
    if successful_results:
        fastest = min(successful_results, key=lambda x: x['time'])
        print(f"\nüèÜ Fastest DNS: {fastest['server']} ({fastest['time']:.1f} ms)")

def quick_dns_check(domain):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö DNS –∑–∞–ø–∏—Å–µ–π"""
    return check_all_records(domain)

def get_domain_ips(domain):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ IP –∞–¥—Ä–µ—Å–∞ –¥–æ–º–µ–Ω–∞"""
    domain = normalize_domain(domain)
    results = {}
    
    a_result = dns_lookup(domain, 'A')
    if a_result['success']:
        results['ipv4'] = a_result['results']
    
    aaaa_result = dns_lookup(domain, 'AAAA')
    if aaaa_result['success']:
        results['ipv6'] = aaaa_result['results']
    
    return results

def check_dns_health(domain):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ DNS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞"""
    domain = normalize_domain(domain)
    
    print(f"\nDNS HEALTH CHECK {domain}")
    print("‚îÄ" * 60)
    
    checks = [
        ('A', 'IPv4 addresses', True),
        ('NS', 'Name servers', True),
        ('MX', 'Mail servers', False),  
        ('SOA', 'Start of authority', True)
    ]
    
    health_status = True
    
    for record_type, description, required in checks:
        result = dns_lookup(domain, record_type)
        
        if result['success']:
            print(f" {record_type}: {len(result['results'])} records found")
        else:
            if required:
                print(f" {record_type}: {result['error']}")
                health_status = False
            else:
                print(f"  {record_type}: {result['error']} (optional)")
    
    if health_status:
        print(f"\n DNS configuration looks healthy")
    else:
        print(f"\n  DNS configuration has issues")



def http_ping_check(url, count=5):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ –ø–æ HTTP/HTTPS
    —Å –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ—Ö–æ–∂–µ–º –Ω–∞ ping
    """
 
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url

    parsed_url = urlparse(url)
    hostname = parsed_url.hostname
    scheme = parsed_url.scheme
    port = parsed_url.port or (443 if scheme == 'https' else 80)

    print(f"HTTP PING {hostname} ({scheme.upper()}:{port})")

    success_count = 0
    response_times = []
    status_codes = []

    for i in range(count):
        try:
            start_time = time.time()
            response = requests.get(url, timeout=10, allow_redirects=True)
            end_time = time.time()

            response_time = (end_time - start_time) * 1000  
            response_times.append(response_time)
            status_codes.append(response.status_code)
            success_count += 1

           
            print(
                f"HTTP seq={i + 1} status={response.status_code} time={response_time:.1f} ms size={len(response.content)} bytes")

        except requests.exceptions.RequestException as e:
            print(f"HTTP seq={i + 1} failed: {str(e)}")
            response_times.append(None)
            status_codes.append(None)

    
        if i < count - 1:
            time.sleep(1)

    
    print(f"\n--- {hostname} HTTP ping statistics ---")
    packet_loss = ((count - success_count) / count) * 100
    print(f"{count} requests made, {success_count} successful, {packet_loss:.0f}% failed")

   
    successful_codes = [code for code in status_codes if code is not None]
    if successful_codes:
        code_counts = {}
        for code in successful_codes:
            code_counts[code] = code_counts.get(code, 0) + 1

        print("Status code distribution:")
        for code, count_val in code_counts.items():
            print(f"  {code}: {count_val} times")

    successful_times = [t for t in response_times if t is not None]
    if successful_times:
        min_time = min(successful_times)
        avg_time = statistics.mean(successful_times)
        max_time = max(successful_times)

        deviations = [abs(t - avg_time) for t in successful_times]
        mdev = statistics.mean(deviations) if deviations else 0

        print(f"response min/avg/max/mdev = {min_time:.3f}/{avg_time:.3f}/{max_time:.3f}/{mdev:.3f} ms")


def advanced_ping_check(url, count=5):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏–Ω–≥–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ping
    """
  
    if url.startswith(('http://', 'https://')):
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname
    else:
        hostname = url

 
    try:
        ip_address = socket.gethostbyname(hostname)
    except socket.gaierror:
        print(f"ping: cannot resolve {hostname}: Unknown host")
        return

    print(f"PING {hostname} ({ip_address}) 56(84) bytes of data.")

    success_count = 0
    ping_times = []

    for i in range(count):
        try:
            start_time = time.time()
            response = requests.get(f"https://{hostname}", timeout=10)
            end_time = time.time()

            ping_time = (end_time - start_time) * 1000  
            ping_times.append(ping_time)
            success_count += 1

        
            print(f"64 bytes from {hostname} ({ip_address}): icmp_seq={i + 1} ttl=54 time={ping_time:.1f} ms")

        except requests.exceptions.RequestException as e:
            print(f"From {ip_address} icmp_seq={i + 1} Destination Host Unreachable")
            ping_times.append(None)

        
        if i < count - 1:
            time.sleep(1)

  
    print(f"\n--- {hostname} ping statistics ---")
    packet_loss = ((count - success_count) / count) * 100
    print(
        f"{count} packets transmitted, {success_count} received, {packet_loss:.0f}% packet loss, time {count * 1000}ms")

    successful_pings = [t for t in ping_times if t is not None]
    if successful_pings:
        min_time = min(successful_pings)
        avg_time = statistics.mean(successful_pings)
        max_time = max(successful_pings)

        
        deviations = [abs(t - avg_time) for t in successful_pings]
        mdev = statistics.mean(deviations) if deviations else 0

        print(f"rtt min/avg/max/mdev = {min_time:.3f}/{avg_time:.3f}/{max_time:.3f}/{mdev:.3f} ms")



def simple_tcp_ping(url, count=5, port=None):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TCP ping —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –ø–æ—Ä—Ç–∞
    """
  
    if url.startswith(('http://', 'https://')):
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname
        if not port:  
            port = parsed_url.port or (443 if parsed_url.scheme == 'https' else 80)
    else:
        hostname = url
        if not port:
            port = 80  

    
    try:
        ip_address = socket.gethostbyname(hostname)
    except socket.gaierror:
        print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å {hostname}")
        return

    print(f"TCP PING {hostname} ({ip_address}):{port}")

    times = []
    successful = 0

    for i in range(count):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)

            start = time.time()
            sock.connect((ip_address, port))
            elapsed = (time.time() - start) * 1000
            sock.close()

            times.append(elapsed)
            successful += 1
            print(f"tcp_seq={i + 1} connect time={elapsed:.1f} ms")

        except socket.timeout:
            print(f"tcp_seq={i + 1} timeout")
            times.append(None)
        except Exception as e:
            print(f"tcp_seq={i + 1} failed: {e}")
            times.append(None)

        if i < count - 1:
            time.sleep(1)

   
    print(f"\n--- {hostname}:{port} tcp statistics ---")
    loss = ((count - successful) / count) * 100
    print(f"{count} attempts, {successful} successful, {loss:.0f}% failure")

    good_times = [t for t in times if t is not None]
    if good_times:
        min_t = min(good_times)
        avg_t = statistics.mean(good_times)
        max_t = max(good_times)
        dev_t = statistics.mean([abs(t - avg_t) for t in good_times])
        print(f"connect min/avg/max/dev = {min_t:.3f}/{avg_t:.3f}/{max_t:.3f}/{dev_t:.3f} ms")



def get_traceroute_command(hostname, max_hops):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É traceroute –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°"""
    if platform.system().lower() == "windows":
        return ["tracert", "-h", str(max_hops), "-w", "3000", hostname]
    else:
        return ["traceroute", "-m", str(max_hops), "-w", "3", "-q", "1", hostname]

def fix_encoding(text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞"""
    try:
        
        for encoding in ['utf-8', 'cp866', 'cp1251', 'iso-8859-1']:
            try:
                return text.encode('utf-8').decode(encoding)
            except (UnicodeDecodeError, UnicodeEncodeError):
                continue
        return text
    except:
        return text

def execute_traceroute(hostname, max_hops=30):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É
    """
   
    target = normalize_domain(hostname)
    
    print(f"\nTRACEROUTE {target}")
    print(f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä—ã–∂–∫–æ–≤: {max_hops}")
    print("‚îÄ" * 60)
    
    try:
        
        command = get_traceroute_command(target, max_hops)
        
       
        if platform.system().lower() == "windows":
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                encoding='cp866',  
                timeout=120
            )
        else:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                encoding='utf-8',  
                timeout=120
            )
        
      
        if result.returncode == 0:
            output = fix_encoding(result.stdout)
            print(output)
            return True
        else:
            error_msg = fix_encoding(result.stderr)
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_msg or "not found" in error_msg:
                print("–û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ traceroute/tracert –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ traceroute —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            else:
                print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error_msg}")
            return False
            
    except subprocess.TimeoutExpired:
        print("–¢–∞–π–º–∞—É—Ç: —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        return False
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ traceroute/tracert –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print("\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        if platform.system().lower() == "windows":
            print("‚Ä¢ Traceroute –≤—Å—Ç—Ä–æ–µ–Ω –≤ Windows –∫–∞–∫ 'tracert'")
        else:
            print("‚Ä¢ Ubuntu/Debian: sudo apt install traceroute")
            print("‚Ä¢ CentOS/RHEL: sudo yum install traceroute")
            print("‚Ä¢ macOS: –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except UnicodeDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å–æ–ª–∏")
        return False
    except Exception as error:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")
        return False

def execute_traceroute_windows_fixed(hostname, max_hops=30):
    """–í–µ—Ä—Å–∏—è –¥–ª—è Windows —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ chcp"""
    if platform.system().lower() != "windows":
        return execute_traceroute(hostname, max_hops)
    
    target = normalize_domain(hostname)
    
    print(f"\nTRACEROUTE {target}")
    print(f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä—ã–∂–∫–æ–≤: {max_hops}")
    print("‚îÄ" * 60)
    
    try:
       
        chcp_result = subprocess.run(["chcp", "65001"], capture_output=True, shell=True)
        
    
        command = ["tracert", "-h", str(max_hops), "-w", "3000", target]
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='ignore',
            timeout=120
        )
        
        if result.returncode == 0:
            print(result.stdout)
            return True
        else:
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False
            
    except Exception as error:
        print(f"–û—à–∏–±–∫–∞: {error}")
        return False



def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("–ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ò")
    print("=" * 50)
    
    
    try:
        import dns.resolver
        import requests
    except ImportError as e:
        print(f"–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install dnspython requests")
        sys.exit(1)
    
  
    if len(sys.argv) > 1:
        domain = sys.argv[1]
    else:
        domain = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ").strip()
        if not domain:
            print("–ù–µ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω")
            return
    
    domain = normalize_domain(domain)
    
    while True:
        print(f"\n–¶–µ–ª–µ–≤–æ–π –¥–æ–º–µ–Ω: {domain}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print("1 - DNS: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π")
        print("2 - DNS: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ DNS —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
        print("3 - DNS: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MX –∑–∞–ø–∏—Å–µ–π")
        print("4 - DNS: –ë–µ–Ω—á–º–∞—Ä–∫ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print("5 - DNS: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏")
        print("6 - DNS: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("7 - HTTP: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞")
        print("8 - PING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞")
        print("9 - TCP: –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        print("10 - TRACEROUTE: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞")
        print("11 - –í–°–ï –ü–†–û–í–ï–†–ö–ò (–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)")
        print("0 - –í—ã—Ö–æ–¥")
        print("c - –°–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä [1]: ").strip().lower() or "1"
        
        if choice == "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break
        elif choice == "c":
            new_domain = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω: ").strip()
            if new_domain:
                domain = normalize_domain(new_domain)
            continue
        
        try:
            if choice == "1":
                check_all_records(domain)
            elif choice == "2":
                check_with_multiple_dns(domain)
            elif choice == "3":
                detailed_mx_check(domain)
            elif choice == "4":
                dns_benchmark(domain)
            elif choice == "5":
                record_type = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏ (A, AAAA, MX, NS, TXT, CNAME): ").strip().upper()
                if record_type in ['A', 'AAAA', 'MX', 'NS', 'TXT', 'CNAME', 'SOA']:
                    result = dns_lookup(domain, record_type)
                    print(f"\n{record_type} records for {domain}:")
                    if result['success']:
                        for i, record in enumerate(result['results'], 1):
                            print(f" {i}. {record}")
                    else:
                        print(f" {result['error']}")
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø DNS –∑–∞–ø–∏—Å–∏")
            elif choice == "6":
                check_dns_health(domain)
            elif choice == "7":
                http_ping_check(domain)
            elif choice == "8":
                advanced_ping_check(domain)
            elif choice == "9":
                port_input = input("–ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ): ").strip()
                port = int(port_input) if port_input else None
                simple_tcp_ping(domain, 5, port)
            elif choice == "10":
                try:
                    hops_input = input("–ú–∞–∫—Å–∏–º—É–º –ø—Ä—ã–∂–∫–æ–≤ [30]: ").strip()
                    max_hops = int(hops_input) if hops_input else 30
                except ValueError:
                    max_hops = 30
                
                if platform.system().lower() == "windows":
                    execute_traceroute_windows_fixed(domain, max_hops)
                else:
                    execute_traceroute(domain, max_hops)
            elif choice == "11":
                print(f"\n{'='*60}")
                print(f"–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –î–û–ú–ï–ù–ê: {domain}")
                print(f"{'='*60}")
                
         
                check_all_records(domain)
                dns_benchmark(domain)
                check_dns_health(domain)
                
              
                http_ping_check(domain)
                advanced_ping_check(domain)
                simple_tcp_ping(domain)
                
          
                if platform.system().lower() == "windows":
                    execute_traceroute_windows_fixed(domain)
                else:
                    execute_traceroute(domain)
                    
                print(f"\n{'='*60}")
                print("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
                print(f"{'='*60}")
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        except KeyboardInterrupt:
            print("\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            continue
        except Exception as e:
            print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            continue
        
       
        if choice != "11":  
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")